[{"authors":null,"categories":null,"content":"I am a fifth year PhD candidate in Dr. Suzanne Alonzo’s lab in the Department of Ecology and Evolutionary Biology at the University of California, Santa Cruz. I am interested in the coevolution of females and males using a combination of empirical work and mathematical modeling. For my dissertation, I am researching how females influence the evolution of male behavior via cryptic female choice (females bias fertilization to specific males) and how cryptic female choice affects speciation. I am also an independent R Shiny web app developer.\n  Download my CV.\nAny opinion, findings, and conclusions or recommendations expressed in material on this website are those of my own and do not necessarily reflect the views of the National Science Foundation.\n","date":1686009600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1686009600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://kustra-matt.github.io/author/matthew-kustra/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/matthew-kustra/","section":"authors","summary":"I am a fifth year PhD candidate in Dr. Suzanne Alonzo’s lab in the Department of Ecology and Evolutionary Biology at the University of California, Santa Cruz. I am interested in the coevolution of females and males using a combination of empirical work and mathematical modeling.","tags":null,"title":"Matthew Kustra","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Matthew Kustra FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://kustra-matt.github.io/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, \u0026#39;Hello world\u0026#39;]  Tuples\n Tuples are immutable - they can’t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, \u0026#39;Hello world\u0026#39;)   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"https://kustra-matt.github.io/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026#34;country == \u0026#39;Canada\u0026#39;\u0026#34;) fig = px.bar(data_canada, x=\u0026#39;year\u0026#39;, y=\u0026#39;pop\u0026#39;) fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"https://kustra-matt.github.io/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"https://kustra-matt.github.io/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://kustra-matt.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Matthew Kustra","Kelly Stiver","Susan Marsh-Rollo","Jennifer Hellmann","Suzanne Alonzo"],"categories":null,"content":"","date":1686009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1686009600,"objectID":"ef3dde67071c3f82d2a88a11b00d0218","permalink":"https://kustra-matt.github.io/publication/kustra-et-al-2023/","publishdate":"2023-06-06T00:00:00Z","relpermalink":"/publication/kustra-et-al-2023/","section":"publication","summary":"Several predictions of sperm competition theory are not well supported empirically. One potential reason is that most current theory and empirical research ignore how the social environment influence the temporal dynamics of mating. We propose that understanding these dynamics is key to understanding sexual selection and improving the predictive power of theory. To demonstrate the importance of these dynamics, we quantify how males’ social role, interactions among males, and current social environment influence the timing of mating in Symphodus ocellatus, a species with three alternative male reproductive tactics. Nesting males spawn synchronously with females; sneakers and satellites sneak-spawn with some time-delay. Satellites also cooperate with nesting males. We found that satellites have shorter sneak-spawning delays than sneakers, a benefit of their cooperation with nesting males. Sneak-spawning delays decreased with increasing nest activity for sneakers but not satellites, suggesting sneakers may benefit from increased sperm competition intensity. Current sperm competition models ignore this potential benefit which may be why the prediction that males should decrease investment when sperm competition involves more than two males is not well supported. Our study provides insight into mechanisms that drive variation in the timing of spawning, which could explain mismatches between theoretical and empirical results.","tags":["Sperm competition","Alternative mating tactics","Sneak-spawning","Sexual selection","Ocellated wrasse","Reproductive competition.","Cooperation"],"title":"Social environment influences the temporal dynamics of sneak-spawning in a fish with alternative reproductive tactics","type":"publication"},{"authors":["Matthew Kustra","Suzanne Alonzo"],"categories":null,"content":"","date":1686009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1686009600,"objectID":"512dc68a8ff52c9ee7a8af05c511f4cb","permalink":"https://kustra-matt.github.io/publication/kustra-alonzo-2023/","publishdate":"2023-06-06T00:00:00Z","relpermalink":"/publication/kustra-alonzo-2023/","section":"publication","summary":"In contrast to sexual selection on traits that affect interactions between the sexes before mating, little theoretical research has focused on the coevolution of postmating traits via cryptic female choice (when females bias fertilization toward specific males). We used simulation models to ask (a) whether and, if so, how nondirectional cryptic female choice (female-by-male interactions in fertilization success) causes deviations from models that focus exclusively on male-mediated postmating processes, and (b) how the risk of sperm competition, the strength of cryptic female choice, and tradeoffs between sperm number and sperm traits interact to influence the coevolutionary dynamics between cryptic female choice and sperm traits. We found that incorporating cryptic female choice can result in males investing much less in their ejaculates than predicted by models with sperm competition only. We also found that cryptic female choice resulted in the evolution of genetic correlations between cryptic female choice and sperm traits, even when the strength of cryptic female choice was weak, and the risk of sperm competition was low. This suggests that cryptic female choice may be important even in systems with low multiple mating. These genetic correlations increased with the risk of sperm competition and as the strength of cryptic female choice increased. When the strength of cryptic female choice and risk of sperm competition was high, extreme codivergence of sperm traits and cryptic female choice preference occurred even when the sperm trait traded off with sperm number. We also found that male traits lagged behind the evolution of female traits; this lag decreased with increasing strength of cryptic female choice and risk of sperm competition. Overall, our results suggest that cryptic female choice deserves more attention theoretically and may be driving trait evolution in ways just beginning to be explored.","tags":["Sperm competition","Postcopulatory sexual selection","Reproductive isolation","Individual-based model","Cryptic Female Choice","Theory"],"title":"The coevolutionary dynamics of cryptic female choice","type":"publication"},{"authors":null,"categories":null,"content":"Introduction to R and RStudio This tutorial is designed as a short introduction into the R programming language and specifically using RStudio.\nR is a free, open source programming language originally developed to analyze data, but it has been greatly expanded to do a lot of tasks. For example, I use R to make interactive websites via the Shiny package.\nRStudio is an IDE (integrative development environment). IDEs are useful because they let you edit/write code but provide a ton of helpful things for you that a plain text editor does not. For example, RStudio will start suggesting certain functions as you are typing and will let you know what inputs these functions require. It will allow you to visualize plots without having to save them. It integrates with other packages allowing me to just click on a few things to publish this tutorial. I built my whole website and other tutorials all within RStudio. These are just a few of the many handful features of RStudio.\nInstalling R and R Studio First install R from here. Then install RStudio Desktop here.\nRStudio When you first open up R studio it should look something like this:\n   The console on the left should have information on the current version of R. If it doesn’t then that means RStudio can’t find the path to R or you don’t have R installed.\nLet’s open up a new R script file to see what RStudio will normally look like. To do that, go to “File -\u0026gt; New File -\u0026gt; R Script” like this:\n   If you noticed there are a few other R file options. Those are from other packages that developers have integrated into RStudio. For example, this tutorial was constructing using R Markdown, a file that lets you make reports that integrate regular text and R code all in one html or pdf file (not covered in this lesson). For most coding/analyses you will be using the standard R script.\nTo give a better sense of what an active enviornment looks like I’m going to open up a project I’m working on.\n   RStudio has four main windows. The top left is the text editor. That’s where you will type the code that you want to save. Typing the code will not run it! To run the code you need to go to the line with your cursor or highlight the sections you want to run. Then if you are using a mac do “command + return” for Windows it’s “Control + Enter.”\u0026#39;\nCode you have run will now appear on the bottom left in the console. You can also directly type code and run it here but it will NOT save when you save the script! \u0026gt; means R is ready for you to run code + means that R is still waiting for you to type something. To get out of that simply press escape.\nThe top right panel is the environment. That’s where you can see all the objects (which we will get into later) that are in your environment and you can use. Clicking on the objects will give you some more info, or for data frames will actually open them up in a separate window.\nThe bottom right panel is where your plots will appear. But if you noticed it also has tabs for “Files,” “Packages,” “Help,” and “Viewer.” “Files” show what files are in your current working directory (more on that later), “Packages” shows what packages you have installed and which are currently loaded up. Packages are essentially nicely packaged code that contains useful functions other R users have made that you can use for yourself. “Help” contains information on how to use various functions that are either included in base R or functions from packages you have installed. To get to that you can use the ? followed by the function name like this: ?FunctionName\nTypes of values In R, like other programming languages, objects can take on a few different of types. Here are a few commonly used ones. double objects also known as numeric represent any real number (e.g., 1.1). There are also integer objects that are integers i.e., they don’t contain decimal places, however, by default 1 will be interpreted as a double. We also have logical values which are either TRUE or FALSE. character can be thought of as text objects and are donated by using double quotations ( e.g,\u0026#34;a\u0026#34;).\nDisclaimer/clarification: Interestingly in R, all the above types are technically vectors. But please note that in this tutorial I use vector to mean anything with length greater than 1, even though in R a single number or single character is technically also a vector albeit of length 1.\nVariables R, like other programming languages, are nice in that you can save objects as variables to use later. The way we do this is with \u0026lt;-. For example:\na\u0026lt;-5  Note that if I run this line nothing prints out but it will be saved in your environment (top right panel) and it should show that it ran in the console (bottom left panel).\n   To actually print out the value there are a few ways. You can either just run the name of the variable a. You can use the function print, print(a). Or you can put parentheses around the variable assignment (a\u0026lt;-5).\na  ## [1] 5  print(a)  ## [1] 5  (a\u0026lt;-5)  ## [1] 5  Commenting Now that we are …","date":1664928000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664928000,"objectID":"4cbcc4df84c81628a51aa2e08521762e","permalink":"https://kustra-matt.github.io/post/intro_to_r/","publishdate":"2022-10-05T00:00:00Z","relpermalink":"/post/intro_to_r/","section":"post","summary":"Introduction to R and RStudio This tutorial is designed as a short introduction into the R programming language and specifically using RStudio.\nR is a free, open source programming language originally developed to analyze data, but it has been greatly expanded to do a lot of tasks.","tags":["R","Basic Programming","Intro"],"title":"Intro to R","type":"post"},{"authors":["Matthew Kustra","Tyler Carrier"],"categories":null,"content":"","date":1659916800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659916800,"objectID":"911838d2d433a21401ff44c02ec33425","permalink":"https://kustra-matt.github.io/publication/kustra-carrier-2022/","publishdate":"2022-08-08T00:00:00Z","relpermalink":"/publication/kustra-carrier-2022/","section":"publication","summary":"Bacterial symbionts are functionally integral to animal reproduction and development, some of which have evolved additional mechanisms to override these host programs. One habitat that is increasingly recognized to contain phylogenetically related lineages of reproductive manipulators is the ocean. The reproduction of marine invertebrates often occurs by free-spawning instead of by the physical contact of copulation in terrestrial systems. We developed an integrated model to understand whether and when microbes that manipulate host reproduction by cytoplasmic incompatibility, feminization, and male killing spread within populations of free-spawning marine invertebrates. Our model support three primary findings. First, sex ratio distortion leads to suboptimal fertilization and zygote production in planktotrophs (feeding larvae), but enhance these processes in lecithotrophs (nonfeeding larvae). Second, feminization and a combination of male killing plus enhanced growth are effective at spreading reproductive manipulators while also inducing a female-biased sex ratio. Third, the majority of free-spawning marine invertebrates could be infected across a range of life-history combinations, with infections harming species with smaller eggs and longer pelagic durations while benefiting species with larger eggs and shorter pelagic durations. Together, this supports the general premise that microbes may manipulate the reproduction of free-spawning marine invertebrates (e.g., by inducing changes in developmental life-history) and that these types of manipulations overlap considerably with terrestrial systems.","tags":["Cytoplasmic incompatability","Feminization","Male killing","Fertilization","Sea urchins","Life-history evolution","Endosymbiont","Theory"],"title":"On the spread of microbes that manipulate reproduction in marine invertebrates","type":"publication"},{"authors":null,"categories":null,"content":"I am interested in the evolution and maintenence of alternative reproductive tactics. My main study system is the unique and intriguing ocellated wrasse (Symphodus ocellatus)! In this species there are three distinct male morphs: (1) nesting males, (2) satellite males, and (3) sneaker males. Females have a strong preference for nesting males who provide all the parental care. Sneaker males will try to sneak in during matings. Satellite males help nesting males chase away sneakers, but when given the opportunity will also try to sneak spawns. In my dissertation I have two main project. First, I am investigating (1) how sneakers and satellite males differ in sneaking delays, (2) how social interactions influence sneaking delays. Second, I am running fertilization experiments to see how female reproductive fluids influence the timing of fertilization and selection on male sneaking delays.\nI have also published a review with my advisor, Suzanne Alonzo, on the evolution of sperm traits in species with alternative reproductive tactics. We specifically reviewed theoretical predictions on how male alternative reproductive tactics should differ in sperm quality. Despite general expectations that sneaker males should have higher sperm quality, existing theory does not make explicit predictions on how males adopting ARTs should differ in sperm traits. When we look at empirical studies, the majority of studies find no significant difference in sperm performance traits between dominant and sneaker males.\n","date":1647475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647475200,"objectID":"60cda3740f86765b6eedadc151eb07d5","permalink":"https://kustra-matt.github.io/project/art/","publishdate":"2022-03-17T00:00:00Z","relpermalink":"/project/art/","section":"project","summary":"Understanding the evolution of alternative reproductive tactics.","tags":["Alternative reproductive tactics","Sperm competition","Theory","Cryptic female choice"],"title":"Alternative reproductive tactics","type":"project"},{"authors":null,"categories":null,"content":"I am interested in using theoretical models to understand how cryptic female choice and sperm competition work together to shape the evolution of both male and female reproductive traits. Currently, I am developing individual-based models to understand the coevolutionary dynamics of cryptic female choice and if cryptic female choice can maintain reproductive isolation.\n","date":1647475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647475200,"objectID":"7f972f069bae44aa366ccadcdd00fd2e","permalink":"https://kustra-matt.github.io/project/cfc/","publishdate":"2022-03-17T00:00:00Z","relpermalink":"/project/cfc/","section":"project","summary":"Understanding the coevolutionary dynamics of cryptic female choice.","tags":["Cryptic female choice","Theory","Sperm competition"],"title":"Cryptic female choice theory","type":"project"},{"authors":null,"categories":null,"content":"I have been collaborating with Tyler Carrier on developing theory to understand the ecological and evolutionary consequences of reproductive manipulating endosymbionts in marine invertebrates. Our first paper from this collaboration was recently accepted at American Naturalist. Email me if you want a copy of the accepted version before it is offically out!\n","date":1647475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647475200,"objectID":"23aea0ef5df7ac783907d9f3291251d4","permalink":"https://kustra-matt.github.io/project/endo/","publishdate":"2022-03-17T00:00:00Z","relpermalink":"/project/endo/","section":"project","summary":"Ecological and evolutionary consequences of reproductive manipulators in marine invertebrates.","tags":["Endosymbionts","Theory"],"title":"Reproductive manipulating endosymbionts","type":"project"},{"authors":null,"categories":null,"content":"For my undergraduate research at the University of Virginia, I completed my distinguished majors thesis in the Cox lab. I used ArcGIS to map out our research island and calculate fine scale variation in the density of lizards on the island. I then looked at how local density and sex ratio varied with different sperm traits, with the idea that males in more competitive environments (higher density and male-biased sex ratio) may invest more into traits that aid in sperm competition. Learn more by checking our publication! Recent work on the same population led by Ariel Kahrl has looked at how selection acts on ejaculate traits.\n","date":1647475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647475200,"objectID":"3850408fe0b880e17dd6985c99563c17","permalink":"https://kustra-matt.github.io/project/lizard/","publishdate":"2022-03-17T00:00:00Z","relpermalink":"/project/lizard/","section":"project","summary":"Understanding sexual selection in a wild population of brown anoles.","tags":["Sperm competition","Spatial"],"title":"Sexual selection in lizards","type":"project"},{"authors":null,"categories":null,"content":"        Getting ready Loading up and checking the data Making the 3D scatter plot Add predictions  Fit a model Making Predictions Adding predictions  Prediction surface  Make the prediction Adding the surface    ‘plotly’ is a popular graphing package in Python, but also has an R interface. What makes plotly really cool is that it is by default interactive, which also makes it great for 3D plots. In this lesson we will make 3D plots in plotly.\nGetting ready First, let’s install the required packages for this tutorial plotly for plotting and reshape2 for making a best fit surface.\ninstall.packages(\u0026#34;plotly\u0026#34;) install.packages(\u0026#34;reshape2\u0026#34;) Next we need to load up the packages.\nlibrary(plotly) library(reshape2)  Loading up and checking the data Then we load up and check our fake data\nData\u0026lt;-read.csv(\u0026#34;Fake_data_3d_plots.csv\u0026#34;) str(Data) ## \u0026#39;data.frame\u0026#39;:\t50 obs. of 4 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Growth_Rate: num 207.4 30.7 93 136.7 181.2 ... ## $ Density_1 : num 25.5 30.9 37.9 24.3 29.6 ... ## $ Density_2 : num 25.8 40.3 27.2 36.4 24.8 ... Our for data set has the density of 2 different species, and the growth rate for species 1.\n Making the 3D scatter plot The structure of plot_ly is similar to ggplot2. We first supply the name of data frame, and then map variables from our data frame to specific “aesthetics” (e.g., x-axis, y-axis, etc.). However, for plot_ly these are just separate parameters and not all within the aes() function. For this mapping we also need to use ~ in front of each variable.\nTo make a 3D scatter plot we need to specify an x-axis, y-axis, and z-axis. We also need to set type=\u0026#34;scatter3d\u0026#34;. Like ggplot2 we can save the plot as a variable to use later on. Finally the name parameter doesn’t show up, but is used to reference specific layers when customizing the plot (which we will use later).\np\u0026lt;-plot_ly(Data,x=~Density_1,y=~Density_2,z=~Growth_Rate,name=\u0026#34;Data\u0026#34;,type=\u0026#34;scatter3d\u0026#34;) p  {\u0026#34;x\u0026#34;:{\u0026#34;visdat\u0026#34;:{\u0026#34;bc556103eafd\u0026#34;:[\u0026#34;function () …","date":1646438400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646438400,"objectID":"2a131a2be52a643e469b57d467cdc505","permalink":"https://kustra-matt.github.io/post/3dplots/","publishdate":"2022-03-05T00:00:00Z","relpermalink":"/post/3dplots/","section":"post","summary":"Getting ready Loading up and checking the data Making the 3D scatter plot Add predictions  Fit a model Making Predictions Adding predictions  Prediction surface  Make the prediction Adding the surface    ‘plotly’ is a popular graphing package in Python, but also has an R interface.","tags":["R","Plot","plotly"],"title":"3D plots with Plotly","type":"post"},{"authors":null,"categories":null,"content":"  General For loop structure  For loop iterating through elements of a vector For loop iterating through index  Closing remarks   This tutorial is designed to help understand/make for loops. This is essential for doing both repetitive and complex analyses in R and are useful for working in other programming language.\nFor loops are really great for repeating the same task over and over and over. Say if you want to run an analysis on a lot of different variables. One option would be to copy and paste the same code and manually change the variable. However, a better way that required less work on your part would be to use a for loop.\nTo follow this lesson you should understand conditional statements and logic in R and ggplot2. See my logic tutorial and ggplot2 tutorial .\nGeneral For loop structure The general form a for loop is shown below:\nIt’s called a for loop because we are looping through some sort of sequence and repeating a task during each iteration. At the end of the iteration, R checks if there is another item in the sequence we are iterating over. If there is another item we repeat a task keeping track of where we are in the sequence we are looping over. Otherwise we exit the loop.\nIn R we can loop through elements of a vector itself or through the different positions i.e., index of the vector.\nFor loop iterating through elements of a vector A cartoon example might be just printing out the values in a vector.\ni is the iterator variable, which keeps track of where we are in b. We use the iterator variable inside the body of the for loop (i.e, inside the curly brackets). In this case all we are printing out i each time, which will be a different element of b. The first time we go through the loop i will be equal to 1, the second time i will be equal to 50, the third time i will be equal to 2, and so on:\n#first lets make a vector of numbers b\u0026lt;-c(1,50,2,3,6,9,20) #lets just print out each number for(i in b){ print (i) } ## [1] 1 ## [1] 50 ## [1] 2 ## [1] 3 ## [1] 6 ## [1] 9 ## [1] 20 We can do more complex things within the for loop. For example, we can include if…else statements. Let’s make a for loop that tests if the current element (i) is even or odd. To test if i is even we will use %% which gives us the modulo (equivalent to the remainder for positive integers). A i will be even if i modulo 2 is 0, otherwise it is odd.\nWe can use the paste() function to put together the value of different variables with characters. So now we are printing out the value of i and whether that element of the b vector is odd or even.\nfor(i in b) { if (i %% 2 == 0) { print(paste(i,\u0026#34;is even\u0026#34;)) } else{ print(paste(i,\u0026#34;is odd\u0026#34;)) } } ## [1] \u0026#34;1 is odd\u0026#34; ## [1] \u0026#34;50 is even\u0026#34; ## [1] \u0026#34;2 is even\u0026#34; ## [1] \u0026#34;3 is odd\u0026#34; ## [1] \u0026#34;6 is even\u0026#34; ## [1] \u0026#34;9 is odd\u0026#34; ## [1] \u0026#34;20 is even\u0026#34;  For loop iterating through index What if we want to save the results? In this case it might make more sense to iterate via index (or location of an element in the vector) rather than the actual element value. This way we can use that index to save the results in a separate vector that corresponds to the original vector.\nThe way do this is rather than for (i in b), we say for(i in 1:length(b)). Thus i will now be 1 the first time we loop through, 2 the second time we loop through, and so forth until we get the length of b which is the last location/position.\nTo do this we first need to make a results vector that is the same length of the input vector b to store our results which we name b_results.\nNext, we modify the for() part as described above. Then we have to change what we are testing. We are no longer testing i since i is the position not an actual element of b. We can get the actual element of b that corresponds to the i’th position using b[i]. Finally to save the results in the right location we will assign values to the corresponding location in b_results like so: b_results[i]\u0026lt;-Result. Putting it all together:\nb_results\u0026lt;-character(length=length(b)) print(\u0026#34;initial b_results\u0026#34;) ## [1] \u0026#34;initial b_results\u0026#34; b_results ## [1] \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; for(i in 1:length(b)){ if(b[i]%%2==0){ b_results[i]\u0026lt;- \u0026#34;Even\u0026#34; }else{ b_results[i]\u0026lt;- \u0026#34;Odd\u0026#34; } } print(\u0026#34;final b_results\u0026#34;) ## [1] \u0026#34;final b_results\u0026#34; b_results ## [1] \u0026#34;Odd\u0026#34; \u0026#34;Even\u0026#34; \u0026#34;Even\u0026#34; \u0026#34;Odd\u0026#34; \u0026#34;Even\u0026#34; \u0026#34;Odd\u0026#34; \u0026#34;Even\u0026#34;   Closing remarks I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Please check out the other tutorials on my website.\n ","date":1641081600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641081600,"objectID":"d4075acb86b4c8b40d16f7f788694375","permalink":"https://kustra-matt.github.io/post/forloop/","publishdate":"2022-01-02T00:00:00Z","relpermalink":"/post/forloop/","section":"post","summary":"General For loop structure  For loop iterating through elements of a vector For loop iterating through index  Closing remarks   This tutorial is designed to help understand/make for loops.","tags":["R","Basic Programming","Intro"],"title":"For Loops","type":"post"},{"authors":null,"categories":null,"content":"  Logical values Relational operators  NA and logic Other is.x() functions  Logical operators Vector logic  Relational operators on vectors Logical operators on vectors Special vector operators  If-Else statements  If-Elif-Else statments  Closing remarks   This tutorial is designed to help understand logic in R and use that logic to write conditional statements (i.e., if-else statements). These programming skills are essential for doing more complex analyses in R and are useful for working in other programming language.\nDisclaimer/clarification: Please note that in this tutorial I use vector to mean anything with length greater than 1, even though in R a single number or single character is technically also a vector albeit of length 1.\nLogical values Logical values can be either true or false. In practice, we generally use them to help filter data or run a specific analysis based on a specific condition. In R logical values are coded as TRUE and FALSE. You may also see/use T or F, however, it is generally recommended not to use these two. This is because you can always overwrite T or F but cannot overwrite TRUE or FALSE. This can cause errors if for whatever reason T or F is overwritten but used elsewhere as a logical value. Logical values are returned whenever we do a comparison, i.e, use a relational operator.\n Relational operators Here are the most common relational operators in R:\nRelational operators\n Let’s code up those examples:\n2\u0026lt;3 ## [1] TRUE 2\u0026gt;8 ## [1] FALSE 3\u0026lt;=3 ## [1] TRUE \u0026#34;APPLE\u0026#34;==\u0026#34;APPLE\u0026#34; ## [1] TRUE \u0026#34;Mayonnaise\u0026#34;!= \u0026#34;Instrument\u0026#34; ## [1] TRUE It is important to note that comparing characters is case sensitive. For example,\u0026#34;Apple\u0026#34;==\u0026#34;APPLE\u0026#34; returns FALSE.\nNA and logic Using comparison operators and other logical functions on NA will return NA even when comparing NA to NA. For example:\n3\u0026gt;NA ## [1] NA NA == NA ## [1] NA If NA == NA is NA, how do I test if there is an NA value? Luckily there is a special R function for that: is.na():\nis.na(NA) ## [1] TRUE is.na(4) ## [1] FALSE  Other is.x() functions While is.na() is probably the most commonly used, there are other similar functions to test for different data types. For example, is.character() tests if the input is a character, is.numeric() tests if the input is numerical. This is often useful when data wrangling. For example:\nis.numeric(\u0026#34;five\u0026#34;) ## [1] FALSE is.numeric(5) ## [1] TRUE is.character(\u0026#34;five\u0026#34;) ## [1] TRUE   Logical operators The next import operators to cover are ones that work on logical values and then return a logical value. These are particulary important if there are multiple conditions you need to be met.\nThe most relevant ones are NOT (!), AND (\u0026amp;), and OR (|) which are described below.\nThe truth table shows the result of either \u0026amp; or | given all possible combinations of inputs (x and y).\nAn example of what that looks like in R\n!(1\u0026gt;2)#should return TRUE ## [1] TRUE (1\u0026gt;2)|(3\u0026gt;2)#Should return TRUE ## [1] TRUE (1\u0026gt;2)\u0026amp;(3\u0026gt;2)#Should return FALSE since 1 is not greater than 2 ## [1] FALSE  Vector logic All of the operations described above work on vectors of data and there are also special functions\nRelational operators on vectors The relational operators discussed above also work on vectors!\nWe can compare a whole vector to a single value. This will return a vector with logical values for the comparison being applied to each element of the vector. For example:\nx\u0026lt;-c(1,3,5,6) 3\u0026lt;x ## [1] FALSE FALSE TRUE TRUE If we compare vectors of the same length, it will return a logical vector doing pairwise comparisons:\ny\u0026lt;-c(1,5,8) z\u0026lt;-c(1,1,5) z==y ## [1] TRUE FALSE FALSE  Logical operators on vectors The logical operators discussed above also work on vectors! Like in the previous section, if we use a logical operator between a vector and a single logical value it will apply that comparison to every element:\n!c(TRUE,FALSE,TRUE) ## [1] FALSE TRUE FALSE TRUE \u0026amp; c(TRUE,FALSE,TRUE) ## [1] TRUE FALSE TRUE If the two vectors are the same length, it will do pairwise operations:\nc(TRUE,FALSE,FALSE) \u0026amp; c(TRUE,FALSE,TRUE) ## [1] TRUE FALSE FALSE c(TRUE,FALSE,FALSE) | c(TRUE,TRUE,TRUE) ## [1] TRUE TRUE TRUE  Special vector operators There are also special functions that act on logical vectors: any(), all(),which(), and %in% described below:\nVector operators\n any()returns TRUE if there is a single TRUE value. Here are a few examples:\nany(2\u0026gt;c(1,7,10)) #should be true cause of 1 ## [1] TRUE any(1\u0026gt;c(1,7,10))  ## [1] FALSE all()only returns true if all elements are TRUE. Here are a few examples of\nall(c(1,2,3,4)==c(1,2,3,5)) ## [1] FALSE all(c(1,2,3,4)==c(1,2,3,4)) ## [1] TRUE all(!is.na(c(NA,2,3,5,NA))) ## [1] FALSE which()returns indexes (or position) of TRUE values. NOTE: that indexing starts at 1 in R unlike other programing languages that start at 0. Here is an example of code that returns the location of NA values.\nwhich(is.na(c(NA,2,3,5,NA))) ## [1] 1 5 %in% tests which items in the vector left of %in% are within the vector right of %in%. For example this will test if …","date":1638403200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638403200,"objectID":"c22751f3026561ddd31a209ecd395b20","permalink":"https://kustra-matt.github.io/post/ifelse/","publishdate":"2021-12-02T00:00:00Z","relpermalink":"/post/ifelse/","section":"post","summary":"Logical values Relational operators  NA and logic Other is.x() functions  Logical operators Vector logic  Relational operators on vectors Logical operators on vectors Special vector operators  If-Else statements  If-Elif-Else statments  Closing remarks   This tutorial is designed to help understand logic in R and use that logic to write conditional statements (i.","tags":["R","Basic Programming","Intro"],"title":"Logic and if-else statements","type":"post"},{"authors":null,"categories":null,"content":"  Getting ready Loading up and checking the data Making our first ggplot2 graph  Initializing ggplot2 Adding geoms (making a scatter plot) Color aesthetics Adding another geom (a line of best fit) A side note on aes()  Faceted plots aka subplots  facet_wrap facet_grid  Other common graphs  Histogram Boxplot  Extra handy things  Saving ggplots as a variable Changing labels Changing default theme  Closing remarks   ‘ggplot2’ is a popular graphing package for the R programming language. Once you’ve learned the logic and the general grammar of “ggplot2” it becomes easy to make publication ready graphs. Unfortunately, the learning curve can be pretty steep, especially if you are used to using basic R plots. This is a tutorial to help you get started making graphs in ‘ggplot2’ and help get through some of the learning curve.\nGetting ready First, let’s install the required packages for this tutorial. We will need to install ggplot2 and the palmerpenguins packages. The ‘palmerpenguins’ package has a great dataset we will be using for this tutorial.\ninstall.packages(\u0026#34;ggplot2\u0026#34;) install.packages(\u0026#34;palmerpenguins\u0026#34;) Next we need to load up the packages.\nlibrary(ggplot2) library(palmerpenguins)  Loading up and checking the data Unlike plotting with base R. ggplot2 requires data frames to make graphs. For this tutorial we will use the penguin dataset from the package ‘palmerpenguins.’ Let’s get some info about the data set, using str function which tells us each column, type of data and starts printing out columns.\nstr(penguins) ## tibble [333 × 8] (S3: tbl_df/tbl/data.frame) ## $ species : Factor w/ 3 levels \u0026#34;Adelie\u0026#34;,\u0026#34;Chinstrap\u0026#34;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ island : Factor w/ 3 levels \u0026#34;Biscoe\u0026#34;,\u0026#34;Dream\u0026#34;,..: 3 3 3 3 3 3 3 3 3 3 ... ## $ bill_length_mm : num [1:333] 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ... ## $ bill_depth_mm : num [1:333] 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ... ## $ flipper_length_mm: int [1:333] 181 186 195 193 190 181 195 182 191 198 ... ## $ body_mass_g : int [1:333] 3750 3800 3250 3450 3650 3625 4675 3200 3800 4400 ... ## $ sex : Factor w/ 2 levels \u0026#34;female\u0026#34;,\u0026#34;male\u0026#34;: 2 1 1 1 2 1 2 1 2 2 ... ## $ year : int [1:333] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...  Making our first ggplot2 graph In this section we will make our first ggplot2 graph! For simplicity we will to a scatter plot of bill_length_mm and bill_depth_mm to see the relationship of these two variables.\nInitializing ggplot2 The first step of making a plot with ggplot2 is to initialize the plot with the function ggplot(). The first argument of the ggplot() function is the dataframe you are using and the second argument defines how you want to map the columns to various components of the graph (e.g., which column will be the x-axis).\nFor example to make a scatter plot of bill_length_mm and bill_depth_mm:\nggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm)) But it looks empty! Exactly, that’s because we haven’t actually specified what we want to plot. The ggplot function just gives us the set up, we have to tell R what we want to plot.\n Adding geoms (making a scatter plot) To actually visualize our data using ggplot2, we need to use “geoms”. Geoms are ways to visually represent our data and ggplot2 has many different options. Here is a great resource to see some of the possibilities.\nIn our case, since we want to make a scatter plot, we just need to add geom_point():\nggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm))+ geom_point()  Color aesthetics It looks like we have three different clusters. Looking back at the data maybe these three different clusters represent the three different species in our data set?\nOne way we could visualize this is by giving each species a different color, using the color parameter. Since, we are matching some sort of aesthetic to a variable in our data frame it has to go inside aes() like so:\nggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+ geom_point()  Adding another geom (a line of best fit) A cool thing with ggplot2 is that it is very easy to add more layers. All we have to do is another + geom_xxx. A logical next step for this scatter plot is to add a line of best fit using the geom_smooth():\nggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula = \u0026#39;y ~ x\u0026#39; It looks a little weird. That’s because by default geom_smooth uses a “loess” function to fit the data. Essentially this fits seperate polynomial functions between various points of your data and strings them together. Often this is not appropriate and vastly overfits your data. The grey shading, by default, shows the 95% confidence interval of the fit.\nWe can specify a specific formula for geom_smooth() but this is out of the scope of this tutorial. Instead, let’s just fit a strait line. The way we do this is by passing the argument method=\u0026#34;lm\u0026#34; in geom_smooth(). “lm” in this case …","date":1633392000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633392000,"objectID":"6f8e63a5d96a9b57ad0541683078aedb","permalink":"https://kustra-matt.github.io/post/ggplot2/","publishdate":"2021-10-05T00:00:00Z","relpermalink":"/post/ggplot2/","section":"post","summary":"Getting ready Loading up and checking the data Making our first ggplot2 graph  Initializing ggplot2 Adding geoms (making a scatter plot) Color aesthetics Adding another geom (a line of best fit) A side note on aes()  Faceted plots aka subplots  facet_wrap facet_grid  Other common graphs  Histogram Boxplot  Extra handy things  Saving ggplots as a variable Changing labels Changing default theme  Closing remarks   ‘ggplot2’ is a popular graphing package for the R programming language.","tags":["R","Plot","ggplot2","Intro"],"title":"Intro to ggplot2","type":"post"},{"authors":["Ariel Kahrl","Matthew Kustra","Aaron Reedy","Rachana Bhave","Heidi Seears","Daniel Warner","Robert Cox"],"categories":null,"content":"","date":1630454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630454400,"objectID":"6f3542740a88708cc403f87609835851","permalink":"https://kustra-matt.github.io/publication/kahrl-et-al-2021/","publishdate":"2021-09-01T00:00:00Z","relpermalink":"/publication/kahrl-et-al-2021/","section":"publication","summary":"Sperm competition is a widespread phenomenon that shapes male reproductive success. Ejaculates present many potential targets for postcopulatory selection (e.g., sperm morphology, count, and velocity), which are often highly correlated and potentially subject to complex multivariate selection. Although multivariate selection on ejaculate traits has been observed in laboratory experiments, it is unclear whether selection is similarly complex in wild populations, where individuals mate frequently over longer periods of time. We measured univariate and multivariate selection on sperm morphology, sperm count, and sperm velocity in a wild population of brown anole lizards (*Anolis sagrei*). We conducted a mark-recapture study with genetic parentage assignment to estimate individual reproductive success. We found significant negative directional selection and negative quadratic selection on sperm count, but we did not detect directional or quadratic selection on any other sperm traits, nor did we detect correlational selection on any trait combinations. Our results may reflect pressure on males to produce many small ejaculates and mate frequently over a six-month reproductive season. This study is the first to measure multivariate selection on sperm traits in a wild population and provides an interesting contrast to experimental studies of external fertilizers, which have found complex multivariate selection on sperm phenotypes.","tags":["Sperm competion","Anolis sagrei","Spatial ecology"],"title":"Selection on Sperm Count, but Not on Sperm Morphology or Velocity, in a Wild Population of Anolis Lizards","type":"publication"},{"authors":["Melissa Cronin","Suzanne Alonzo","Stephanie Adamczak","D. Nevé Baker","Roxanne Beltran","Abraham Borker","Arina Favilla","Remy Gatins","Laura Goetz","Nicole Hack","Julia Harenčár","Elizabeth Howard","Matthew Kustra","Rossana Maguiña","Lourdes Martinez-Estevez","Rita Mehta","Ingrid Parker","Kyle Reid","May Roberts","Sabrina Shirazi","Theresa-Anne M. Tatom-Naecker","Kelley Voss","Ellen Willis-Norton","Bee Vadakan","Ana Valenzuela-Toro","Erika Zavaleta"],"categories":null,"content":"","date":1627776000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627776000,"objectID":"c0ebe9acaa21b6fca2ffe3c134c11567","permalink":"https://kustra-matt.github.io/publication/cronnin-et-al-2021/","publishdate":"2021-08-01T00:00:00Z","relpermalink":"/publication/cronnin-et-al-2021/","section":"publication","summary":"Racial and ethnic discrimination persist in science, technology, engineering and mathematics fields, including ecology, evolution and conservation biology (EECB) and related disciplines. Marginalization and oppression as a result of institutional and structural racism continue to create barriers to inclusion for Black people, Indigenous people and people of colour (BIPOC), and remnants of historic racist policies and pseudoscientific theories continue to plague these fields. Many academic EECB departments seek concrete ways to improve the climate and implement anti-racist policies in their teaching, training and research activities. We present a toolkit of evidence-based interventions for academic EECB departments to foster anti-racism in three areas: in the classroom; within research laboratories; and department wide. To spark restorative discussion and action in these areas, we summarize EECB’s racist and ethnocentric histories, as well as current systemic problems that marginalize non-white groups. Finally, we present ways that EECB departments can collectively address shortcomings in equity and inclusion by implementing anti-racism, and provide a positive model for other departments and disciplines.","tags":["Anti-racism","Pedagogy"],"title":"Anti-racist interventions to transform ecology, evolution and conservation biology departments","type":"publication"},{"authors":["Matthew Kustra","Suzanne Alonzo"],"categories":null,"content":"","date":1594080000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594080000,"objectID":"fe7aeff5de4ed2eda39d98670b467680","permalink":"https://kustra-matt.github.io/publication/kustra-alonzo-2020/","publishdate":"2020-07-07T00:00:00Z","relpermalink":"/publication/kustra-alonzo-2020/","section":"publication","summary":"Males that exhibit alternative reproductive tactics (ARTs) often differ in the risk of sperm competition and the energetic trade-offs they experience. The resulting patterns of selection could lead to between-tactic differences in ejaculate traits. Despite extensive research on male ARTs, there is no comprehensive review of whether and what differences in sperm traits exist between male ARTs. We review existing theory on ejaculate evolution relevant to ARTs and then conduct a comprehensive vote-counting review of the empirical data comparing sperm traits between males adopting ARTs. Despite the general expectation that sneaker males should produce sperm that are more competitive (e.g. higher quality or performance), we find that existing theory does not predict explicitly how males adopting ARTs should differ in sperm traits. The majority of studies find no significant difference in sperm performance traits between dominant and sneaker males. However, when there is a difference, sneaker males tend to have higher sperm performance trait values than dominant males. We propose ways that future theoretical and empirical research can improve our understanding of the evolution of ejaculate traits in ARTs. We then highlight how studying ejaculate traits in species with ARTs will improve our broader knowledge of ejaculate evolution.","tags":["Review","Alternative reproductive tactics","Sperm competition","Theory"],"title":"Sperm and alternative reproductive tactics: a review of existing theory and empirical data","type":"publication"},{"authors":["Matthew Kustra","Ariel Kahrl","Aaron Reedy","Daniel Warner","Robert Cox"],"categories":null,"content":"","date":1571270400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571270400,"objectID":"08add501cf0a70d853adfc6482017742","permalink":"https://kustra-matt.github.io/publication/kustra-et-al-2019/","publishdate":"2019-10-17T00:00:00Z","relpermalink":"/publication/kustra-et-al-2019/","section":"publication","summary":"Given that sperm production can be costly, theory predicts that males should optimally adjust the quantity and/or quality of their sperm in response to their social environment to maximize their paternity success. Although experiments demonstrate that males can alter their ejaculates in response to manipulations of the social environment and studies show that ejaculate traits covary with social environment across populations, it is unknown whether individual variation in sperm traits corresponds to natural variation found within wild populations. Using an island population of brown anole lizards (*Anolis sagrei*), we tested the prediction that sperm traits (sperm count, sperm morphology, sperm velocity) respond to natural variation in the risk of sperm competition, as inferred from the local density and operational sex ratio (OSR) of conspecifics. We found that males living in high-density areas of the island produced relatively larger sperm midpieces, smaller sperm heads, and lower sperm counts. Sperm traits were unrelated to OSR after accounting for the covariance between OSR and density. Our findings broaden the implications of sperm competition theory to intrapopulation social environment variation by showing that sperm count and sperm morphology vary with fine-scale differences in density within a single wild population","tags":["Sperm competion","Anolis sagrei","Spatial ecology"],"title":"Sperm morphology and count vary with fine-scale changes in local density in a wild lizard population","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}   Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://kustra-matt.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://kustra-matt.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]