<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic Programming | Matt Kustra</title>
    <link>https://kustra-matt.github.io/tag/basic-programming/</link>
      <atom:link href="https://kustra-matt.github.io/tag/basic-programming/index.xml" rel="self" type="application/rss+xml" />
    <description>Basic Programming</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 02 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://kustra-matt.github.io/media/icon_hu968023516251523fc9a78b9c44e7eeb6_483323_512x512_fill_lanczos_center_3.png</url>
      <title>Basic Programming</title>
      <link>https://kustra-matt.github.io/tag/basic-programming/</link>
    </image>
    
    <item>
      <title>For Loops</title>
      <link>https://kustra-matt.github.io/post/forloop/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://kustra-matt.github.io/post/forloop/</guid>
      <description>&lt;p&gt;This tutorial is designed to help understand/make for loops. This is essential for doing both repetitive and complex  analyses in R and are useful for working in other programming language.&lt;/p&gt;
&lt;p&gt;For loops are really great for repeating the same task over and over and over. Say if you want to run an analysis on a lot of different variables. One option would be to copy and paste the same code and manually change the variable. However, a better way that required less work on your part would be to use a for loop.&lt;/p&gt;
&lt;p&gt;To follow this lesson you should understand conditional statements and logic in R and &lt;code&gt;ggplot2&lt;/code&gt;. See my &lt;a href=&#34;https://kustra-matt.github.io/post/ifelse/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;logic tutorial&lt;/a&gt; and &lt;a href=&#34;https://kustra-matt.github.io/post/ggplot2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2 tutorial&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;general-for-loop-structure&#34;&gt;General For loop structure&lt;/h2&gt;
&lt;p&gt;The general form a for loop is shown below:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Else&#34; srcset=&#34;
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_2c8758fc584351eaacdeb429f82c575d.webp 400w,
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_26b84517e16d91a6fa8d77e16babcc4e.webp 760w,
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_2c8758fc584351eaacdeb429f82c575d.webp&#34;
               width=&#34;760&#34;
               height=&#34;414&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

It&amp;rsquo;s called a for loop because we are looping through some sort of sequence and repeating a task during each iteration. At the end of the iteration, R checks if there is another item in the sequence we are iterating over. If there is another item we repeat a task keeping track of where we are in the sequence we are looping over. Otherwise we exit the loop.&lt;/p&gt;
&lt;p&gt;In R we can loop through elements of a vector itself or through the different positions i.e., index of the vector.&lt;/p&gt;
&lt;h3 id=&#34;for-loop-iterating-through-elements-of-a-vector&#34;&gt;For loop iterating through elements of a vector&lt;/h3&gt;
&lt;p&gt;A cartoon example might be just printing out the values in a vector.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; is the iterator variable, which keeps track of where we are in b. We use the iterator variable inside the body of the for loop (i.e, inside the curly brackets). In this case all we are printing out &lt;code&gt;i&lt;/code&gt; each time, which will be a different element of &lt;code&gt;b&lt;/code&gt;. The first time we go through the loop &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;1&lt;/code&gt;, the second time &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;50&lt;/code&gt;, the third time &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;2&lt;/code&gt;, and so on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#first lets make a vector of numbers
b&amp;lt;-c(1,50,2,3,6,9,20)
#lets just print out each number
for(i in b){
  print (i)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 50
## [1] 2
## [1] 3
## [1] 6
## [1] 9
## [1] 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do more complex things within the for loop. For example, we can include if&amp;hellip;else statements. Let&amp;rsquo;s make a for loop that tests if the current element (&lt;code&gt;i&lt;/code&gt;) is even or odd. To test if &lt;code&gt;i&lt;/code&gt; is even we will use &lt;code&gt;%%&lt;/code&gt; which gives us the modulo (equivalent to the remainder for positive integers). A &lt;code&gt;i&lt;/code&gt; will be even if &lt;code&gt;i&lt;/code&gt; modulo 2 is 0, otherwise it is odd.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;paste()&lt;/code&gt; function to put together the value of different variables with characters. So now we are printing out the value of &lt;code&gt;i&lt;/code&gt; and whether that element of the &lt;code&gt;b&lt;/code&gt; vector is odd or even.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for(i in b) {
  if (i %% 2 == 0) {
    print(paste(i,&amp;quot;is even&amp;quot;))
  } else{
    print(paste(i,&amp;quot;is odd&amp;quot;))
  }
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1 is odd&amp;quot;
## [1] &amp;quot;50 is even&amp;quot;
## [1] &amp;quot;2 is even&amp;quot;
## [1] &amp;quot;3 is odd&amp;quot;
## [1] &amp;quot;6 is even&amp;quot;
## [1] &amp;quot;9 is odd&amp;quot;
## [1] &amp;quot;20 is even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;for-loop-iterating-through-index&#34;&gt;For loop iterating through index&lt;/h3&gt;
&lt;p&gt;What if we want to save the results? In this case it might make more sense to iterate via index (or location of an element in the vector) rather than the actual element value. This way we can use that index to save the results in a separate vector that corresponds to the original vector.&lt;/p&gt;
&lt;p&gt;The way do this is rather than &lt;code&gt;for (i in b)&lt;/code&gt;, we say &lt;code&gt;for(i in 1:length(b))&lt;/code&gt;. Thus &lt;code&gt;i&lt;/code&gt; will now be 1 the first time we loop through, 2 the second time we loop through, and so forth until we get the length of b which is the last location/position.&lt;/p&gt;
&lt;p&gt;To do this we first need to make a results vector that is the same length of the input vector &lt;code&gt;b&lt;/code&gt; to store our results which we name &lt;code&gt;b_results&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we modify the &lt;code&gt;for()&lt;/code&gt; part as described above. Then we have to change what we are testing. We are no longer testing &lt;code&gt;i&lt;/code&gt; since &lt;code&gt;i&lt;/code&gt; is the position not an actual element of &lt;code&gt;b&lt;/code&gt;. We can get the actual element of &lt;code&gt;b&lt;/code&gt; that corresponds to the i&amp;rsquo;th position using &lt;code&gt;b[i]&lt;/code&gt;. Finally to save the results in the right location we will assign values to the corresponding location in &lt;code&gt;b_results&lt;/code&gt; like so: &lt;code&gt;b_results[i]&amp;lt;-Result&lt;/code&gt;. Putting it all together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results&amp;lt;-character(length=length(b))
print(&amp;quot;initial b_results&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;initial b_results&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for(i in 1:length(b)){
  if(b[i]%%2==0){
    b_results[i]&amp;lt;- &amp;quot;Even&amp;quot;
  }else{
    b_results[i]&amp;lt;- &amp;quot;Odd&amp;quot;
  }
}
print(&amp;quot;final b_results&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;final b_results&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot; &amp;quot;Even&amp;quot; &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot; &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;closing-remarks&#34;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Please check out the other tutorials on my website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logic and if-else statements</title>
      <link>https://kustra-matt.github.io/post/ifelse/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kustra-matt.github.io/post/ifelse/</guid>
      <description>&lt;p&gt;This tutorial is designed to help understand logic in R and use that logic to write conditional statements (i.e., if-else statements). These programming skills are essential for doing more complex analyses in R and are useful for working in other programming language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer/clarification&lt;/strong&gt;: Please note that in this tutorial I use vector to mean anything with length greater than 1, even though in R a single number or single character is technically also a vector albeit of length 1.&lt;/p&gt;
&lt;h2 id=&#34;logical-values&#34;&gt;Logical values&lt;/h2&gt;
&lt;p&gt;Logical values can be either true or false. In practice, we generally use them to help filter data or run a specific analysis based on a specific condition. In R logical values are coded as &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;. You may also see/use &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt;, however, it is generally recommended not to use these two. This is because you can always overwrite &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; but cannot overwrite &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. This can cause errors if for whatever reason &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; is overwritten but used elsewhere as a logical value. Logical values are returned whenever we do a comparison, i.e, use a relational operator.&lt;/p&gt;
&lt;h2 id=&#34;relational-operators&#34;&gt;Relational operators&lt;/h2&gt;
&lt;p&gt;Here are the most common relational operators in R:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Relational operators&#34; srcset=&#34;
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_0cbcf0b43837b0f440e1018b43631498.webp 400w,
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_6c2ebe4838a4ffb6bdac21a5f05f1441.webp 760w,
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_0cbcf0b43837b0f440e1018b43631498.webp&#34;
               width=&#34;760&#34;
               height=&#34;281&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s code up those examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;2&amp;lt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;2&amp;gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3&amp;lt;=3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;quot;APPLE&amp;quot;==&amp;quot;APPLE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;quot;Mayonnaise&amp;quot;!= &amp;quot;Instrument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note that comparing characters is case sensitive. For example,&lt;code&gt;&amp;quot;Apple&amp;quot;==&amp;quot;APPLE&amp;quot;&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;na-and-logic&#34;&gt;&lt;code&gt;NA&lt;/code&gt; and logic&lt;/h3&gt;
&lt;p&gt;Using comparison operators and other logical functions on &lt;code&gt;NA&lt;/code&gt; will return &lt;code&gt;NA&lt;/code&gt; even when comparing &lt;code&gt;NA&lt;/code&gt; to &lt;code&gt;NA&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3&amp;gt;NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;NA == NA&lt;/code&gt; is &lt;code&gt;NA&lt;/code&gt;, how do I test if there is an &lt;code&gt;NA&lt;/code&gt; value? Luckily there is a special R function for that: &lt;code&gt;is.na()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;other-isx-functions&#34;&gt;Other &lt;code&gt;is.x()&lt;/code&gt; functions&lt;/h3&gt;
&lt;p&gt;While &lt;code&gt;is.na()&lt;/code&gt; is probably the most commonly used, there are other similar functions to test for different data types. For example, &lt;code&gt;is.character()&lt;/code&gt; tests if the input is a character, &lt;code&gt;is.numeric()&lt;/code&gt; tests if the input is numerical. This is often useful when data wrangling. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.numeric(&amp;quot;five&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.numeric(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.character(&amp;quot;five&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;Logical operators&lt;/h2&gt;
&lt;p&gt;The next import operators to cover are ones that work on logical values and then return a logical value. These are particulary important if there are multiple conditions you need to be met.&lt;/p&gt;
&lt;p&gt;The most relevant ones are NOT (&lt;code&gt;!&lt;/code&gt;), AND (&lt;code&gt;&amp;amp;&lt;/code&gt;), and OR (&lt;code&gt;|&lt;/code&gt;) which are described below.&lt;/p&gt;
&lt;p&gt;The truth table shows the result of either &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; given all possible combinations of inputs (x and y).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Logical Operators&#34; srcset=&#34;
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_77d6585d90356c2f7f1754d35c12c522.webp 400w,
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_c96a0a8ca5678d6ea0d74c1a4c857fa4.webp 760w,
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_77d6585d90356c2f7f1754d35c12c522.webp&#34;
               width=&#34;760&#34;
               height=&#34;380&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

An example of what that looks like in R&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;!(1&amp;gt;2)#should return TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(1&amp;gt;2)|(3&amp;gt;2)#Should return TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(1&amp;gt;2)&amp;amp;(3&amp;gt;2)#Should return FALSE since 1 is not greater than 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vector-logic&#34;&gt;Vector logic&lt;/h2&gt;
&lt;p&gt;All of the operations described above work on vectors of data and there are also special functions&lt;/p&gt;
&lt;h3 id=&#34;relational-operators-on-vectors&#34;&gt;Relational operators on vectors&lt;/h3&gt;
&lt;p&gt;The relational operators discussed above also work on vectors!&lt;/p&gt;
&lt;p&gt;We can compare a whole vector to a single value. This will return a vector with logical values for the comparison being applied to each element of the vector. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x&amp;lt;-c(1,3,5,6)
3&amp;lt;x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we compare vectors of the same length, it will return a logical vector doing pairwise comparisons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y&amp;lt;-c(1,5,8)
z&amp;lt;-c(1,1,5)
z==y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;logical-operators-on-vectors&#34;&gt;Logical operators on vectors&lt;/h3&gt;
&lt;p&gt;The logical operators discussed above also work on vectors! Like in the previous section, if we use a logical operator between a vector and a single logical value it will apply that comparison to every element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;!c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;TRUE &amp;amp; c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the two vectors are the same length, it will do pairwise operations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(TRUE,FALSE,FALSE) &amp;amp; c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(TRUE,FALSE,FALSE) | c(TRUE,TRUE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;special-vector-operators&#34;&gt;Special vector operators&lt;/h3&gt;
&lt;p&gt;There are also special functions that act on logical vectors: &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;all()&lt;/code&gt;,&lt;code&gt;which()&lt;/code&gt;, and &lt;code&gt;%in%&lt;/code&gt; described below:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Vector operators&#34; srcset=&#34;
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_89d943f8109f6bbec6f52f93476db367.webp 400w,
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_9766243c56818e98b0eb7976daaaf213.webp 760w,
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_89d943f8109f6bbec6f52f93476db367.webp&#34;
               width=&#34;760&#34;
               height=&#34;252&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;any()&lt;/code&gt;returns &lt;code&gt;TRUE&lt;/code&gt; if there is a single &lt;code&gt;TRUE&lt;/code&gt; value. Here are a few examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;any(2&amp;gt;c(1,7,10)) #should be true cause of 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;any(1&amp;gt;c(1,7,10)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;all()&lt;/code&gt;only returns true if all elements are &lt;code&gt;TRUE&lt;/code&gt;. Here are a few examples of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(c(1,2,3,4)==c(1,2,3,5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(c(1,2,3,4)==c(1,2,3,4))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(!is.na(c(NA,2,3,5,NA)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;which()&lt;/code&gt;returns indexes (or position) of &lt;code&gt;TRUE&lt;/code&gt; values. NOTE: that indexing starts at 1 in R unlike other programing languages that start at 0. Here is an example of code that returns the location of NA values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;which(is.na(c(NA,2,3,5,NA)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%in%&lt;/code&gt; tests which items in the vector left of &lt;code&gt;%in%&lt;/code&gt; are within the vector right of &lt;code&gt;%in%&lt;/code&gt;. For example this will test if any of the fruits listed in the vector on the left are in the vector on the right.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(&amp;quot;Strawberry&amp;quot;,&amp;quot;Apple&amp;quot;,&amp;quot;Lychee&amp;quot;,&amp;quot;Pear&amp;quot;) %in% c(&amp;quot;Apple&amp;quot;,&amp;quot;Pear&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;if-else-statements&#34;&gt;If-Else statements&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s get into conditionals! Often times, we use these logical values or logical results to do something conditioned on them. Graphically this looks like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Else&#34; srcset=&#34;
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1a238528a4e6e66f61a4dd90cb6c4690.webp 400w,
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_0100e0aa5c35877f3ddd824b9ae0ac6c.webp 760w,
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1a238528a4e6e66f61a4dd90cb6c4690.webp&#34;
               width=&#34;760&#34;
               height=&#34;413&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;An example would be If it is raining, then I will bring an umbrella, otherwise I will not bring an umbrella. The condition is &amp;ldquo;presence/absence of rain&amp;rdquo;. The different actions is either &amp;ldquo;bring an umbrella&amp;rdquo; or don&amp;rsquo;t &amp;ldquo;bring an umbrella.&amp;rdquo; Coded up in R this is what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(weather==&amp;quot;rain&amp;quot;){
  &amp;quot;Bring an umbrella&amp;quot;
}else{
  &amp;quot;Dont bring an umbrella&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more useful example would be in a function or a &lt;a href=&#34;https://kustra-matt.github.io/post/forloop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;for loop&lt;/a&gt;. Let&amp;rsquo;s make a function to test if something is odd or even.&lt;/p&gt;
&lt;p&gt;To do this we will name our function &lt;code&gt;even_odd&lt;/code&gt; and declare it a as a function with one input &lt;code&gt;num&lt;/code&gt;: &lt;code&gt;function(num)&lt;/code&gt;. Then we will use are if&amp;hellip;else statements to test if &lt;code&gt;num&lt;/code&gt; is even or odd and return a character value indicating the result of that test. To test if &lt;code&gt;num&lt;/code&gt; is even we will use &lt;code&gt;%%&lt;/code&gt; which gives us the modulo (equivalent to the remainder for positive integers). A &lt;code&gt;num&lt;/code&gt; will be even if &lt;code&gt;num&lt;/code&gt; modulo 2 is 0, otherwise it is odd.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd&amp;lt;-function(num){
  if(num%%2==0){
    return(&amp;quot;Even&amp;quot;)
  }else{
    return(&amp;quot;Odd&amp;quot;)
  }
  
}

even_odd(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we run &lt;code&gt;even_odd(NA)&lt;/code&gt; this will throw an error. We need to add another condition to catch &lt;code&gt;NA&lt;/code&gt; values. But how do we add another condition?&lt;/p&gt;
&lt;h3 id=&#34;if-elif-else-statments&#34;&gt;If-Elif-Else statments&lt;/h3&gt;
&lt;p&gt;Luckily it&amp;rsquo;s super easy to add another condition with &lt;code&gt;else if(){}&lt;/code&gt; and we can add an arbitrary amount of conditions stringing together &lt;code&gt;else if(){}&lt;/code&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: the order matters as in R will evalutate the first condition in the &lt;code&gt;if&lt;/code&gt; statement then the first &lt;code&gt;else if&lt;/code&gt; then the next &lt;code&gt;else if&lt;/code&gt; and so on until the &lt;code&gt;else&lt;/code&gt; block. Shown below is a diagram of what that looks like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Elif-Else&#34; srcset=&#34;
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_e7b25f589a499f8b5392b4f19de2a8b0.webp 400w,
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_540b5f98863dc57957c009ee692f1751.webp 760w,
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_e7b25f589a499f8b5392b4f19de2a8b0.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Let&amp;rsquo;s try our new and improved &lt;code&gt;even_odd&lt;/code&gt; function. Because errors happen when we try to test &lt;code&gt;NA&lt;/code&gt; values. Let&amp;rsquo;s make that our first condition we check.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd&amp;lt;-function(num){
  if(is.na(num)){
    return(&amp;quot;NA!&amp;quot;)
  }else if(num%%2==0){
    return(&amp;quot;Even&amp;quot;)
  }else{
    return(&amp;quot;Odd&amp;quot;)
  }
  
}
even_odd(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;NA!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it worked!&lt;/p&gt;
&lt;h2 id=&#34;closing-remarks&#34;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Please check out the other tutorials on my website.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
