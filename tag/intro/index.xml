<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intro | Matt Kustra</title>
    <link>https://kustra-matt.github.io/tag/intro/</link>
      <atom:link href="https://kustra-matt.github.io/tag/intro/index.xml" rel="self" type="application/rss+xml" />
    <description>Intro</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 02 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://kustra-matt.github.io/media/icon_hu968023516251523fc9a78b9c44e7eeb6_483323_512x512_fill_lanczos_center_3.png</url>
      <title>Intro</title>
      <link>https://kustra-matt.github.io/tag/intro/</link>
    </image>
    
    <item>
      <title>For Loops</title>
      <link>https://kustra-matt.github.io/post/forloop/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://kustra-matt.github.io/post/forloop/</guid>
      <description>&lt;p&gt;This tutorial is designed to help understand/make for loops. This is essential for doing both repetitive and complex  analyses in R and are useful for working in other programming language.&lt;/p&gt;
&lt;p&gt;For loops are really great for repeating the same task over and over and over. Say if you want to run an analysis on a lot of different variables. One option would be to copy and paste the same code and manually change the variable. However, a better way that required less work on your part would be to use a for loop.&lt;/p&gt;
&lt;p&gt;To follow this lesson you should understand conditional statements and logic in R and &lt;code&gt;ggplot2&lt;/code&gt;. See my &lt;a href=&#34;https://kustra-matt.github.io/post/ifelse/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;logic tutorial&lt;/a&gt; and &lt;a href=&#34;https://kustra-matt.github.io/post/ggplot2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2 tutorial&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;general-for-loop-structure&#34;&gt;General For loop structure&lt;/h2&gt;
&lt;p&gt;The general form a for loop is shown below:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Else&#34; srcset=&#34;
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_2c8758fc584351eaacdeb429f82c575d.webp 400w,
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_26b84517e16d91a6fa8d77e16babcc4e.webp 760w,
               /post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/forloop/featured_hu3e4d07265ac2b0f2cae65ed9882ed100_276829_2c8758fc584351eaacdeb429f82c575d.webp&#34;
               width=&#34;760&#34;
               height=&#34;414&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

It&amp;rsquo;s called a for loop because we are looping through some sort of sequence and repeating a task during each iteration. At the end of the iteration, R checks if there is another item in the sequence we are iterating over. If there is another item we repeat a task keeping track of where we are in the sequence we are looping over. Otherwise we exit the loop.&lt;/p&gt;
&lt;p&gt;In R we can loop through elements of a vector itself or through the different positions i.e., index of the vector.&lt;/p&gt;
&lt;h3 id=&#34;for-loop-iterating-through-elements-of-a-vector&#34;&gt;For loop iterating through elements of a vector&lt;/h3&gt;
&lt;p&gt;A cartoon example might be just printing out the values in a vector.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; is the iterator variable, which keeps track of where we are in b. We use the iterator variable inside the body of the for loop (i.e, inside the curly brackets). In this case all we are printing out &lt;code&gt;i&lt;/code&gt; each time, which will be a different element of &lt;code&gt;b&lt;/code&gt;. The first time we go through the loop &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;1&lt;/code&gt;, the second time &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;50&lt;/code&gt;, the third time &lt;code&gt;i&lt;/code&gt; will be equal to &lt;code&gt;2&lt;/code&gt;, and so on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#first lets make a vector of numbers
b&amp;lt;-c(1,50,2,3,6,9,20)
#lets just print out each number
for(i in b){
  print (i)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 50
## [1] 2
## [1] 3
## [1] 6
## [1] 9
## [1] 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do more complex things within the for loop. For example, we can include if&amp;hellip;else statements. Let&amp;rsquo;s make a for loop that tests if the current element (&lt;code&gt;i&lt;/code&gt;) is even or odd. To test if &lt;code&gt;i&lt;/code&gt; is even we will use &lt;code&gt;%%&lt;/code&gt; which gives us the modulo (equivalent to the remainder for positive integers). A &lt;code&gt;i&lt;/code&gt; will be even if &lt;code&gt;i&lt;/code&gt; modulo 2 is 0, otherwise it is odd.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;paste()&lt;/code&gt; function to put together the value of different variables with characters. So now we are printing out the value of &lt;code&gt;i&lt;/code&gt; and whether that element of the &lt;code&gt;b&lt;/code&gt; vector is odd or even.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for(i in b) {
  if (i %% 2 == 0) {
    print(paste(i,&amp;quot;is even&amp;quot;))
  } else{
    print(paste(i,&amp;quot;is odd&amp;quot;))
  }
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1 is odd&amp;quot;
## [1] &amp;quot;50 is even&amp;quot;
## [1] &amp;quot;2 is even&amp;quot;
## [1] &amp;quot;3 is odd&amp;quot;
## [1] &amp;quot;6 is even&amp;quot;
## [1] &amp;quot;9 is odd&amp;quot;
## [1] &amp;quot;20 is even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;for-loop-iterating-through-index&#34;&gt;For loop iterating through index&lt;/h3&gt;
&lt;p&gt;What if we want to save the results? In this case it might make more sense to iterate via index (or location of an element in the vector) rather than the actual element value. This way we can use that index to save the results in a separate vector that corresponds to the original vector.&lt;/p&gt;
&lt;p&gt;The way do this is rather than &lt;code&gt;for (i in b)&lt;/code&gt;, we say &lt;code&gt;for(i in 1:length(b))&lt;/code&gt;. Thus &lt;code&gt;i&lt;/code&gt; will now be 1 the first time we loop through, 2 the second time we loop through, and so forth until we get the length of b which is the last location/position.&lt;/p&gt;
&lt;p&gt;To do this we first need to make a results vector that is the same length of the input vector &lt;code&gt;b&lt;/code&gt; to store our results which we name &lt;code&gt;b_results&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we modify the &lt;code&gt;for()&lt;/code&gt; part as described above. Then we have to change what we are testing. We are no longer testing &lt;code&gt;i&lt;/code&gt; since &lt;code&gt;i&lt;/code&gt; is the position not an actual element of &lt;code&gt;b&lt;/code&gt;. We can get the actual element of &lt;code&gt;b&lt;/code&gt; that corresponds to the i&amp;rsquo;th position using &lt;code&gt;b[i]&lt;/code&gt;. Finally to save the results in the right location we will assign values to the corresponding location in &lt;code&gt;b_results&lt;/code&gt; like so: &lt;code&gt;b_results[i]&amp;lt;-Result&lt;/code&gt;. Putting it all together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results&amp;lt;-character(length=length(b))
print(&amp;quot;initial b_results&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;initial b_results&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for(i in 1:length(b)){
  if(b[i]%%2==0){
    b_results[i]&amp;lt;- &amp;quot;Even&amp;quot;
  }else{
    b_results[i]&amp;lt;- &amp;quot;Odd&amp;quot;
  }
}
print(&amp;quot;final b_results&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;final b_results&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b_results
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot; &amp;quot;Even&amp;quot; &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot; &amp;quot;Odd&amp;quot;  &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;closing-remarks&#34;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Please check out the other tutorials on my website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logic and if-else statements</title>
      <link>https://kustra-matt.github.io/post/ifelse/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kustra-matt.github.io/post/ifelse/</guid>
      <description>&lt;p&gt;This tutorial is designed to help understand logic in R and use that logic to write conditional statements (i.e., if-else statements). These programming skills are essential for doing more complex analyses in R and are useful for working in other programming language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer/clarification&lt;/strong&gt;: Please note that in this tutorial I use vector to mean anything with length greater than 1, even though in R a single number or single character is technically also a vector albeit of length 1.&lt;/p&gt;
&lt;h2 id=&#34;logical-values&#34;&gt;Logical values&lt;/h2&gt;
&lt;p&gt;Logical values can be either true or false. In practice, we generally use them to help filter data or run a specific analysis based on a specific condition. In R logical values are coded as &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;. You may also see/use &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt;, however, it is generally recommended not to use these two. This is because you can always overwrite &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; but cannot overwrite &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. This can cause errors if for whatever reason &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; is overwritten but used elsewhere as a logical value. Logical values are returned whenever we do a comparison, i.e, use a relational operator.&lt;/p&gt;
&lt;h2 id=&#34;relational-operators&#34;&gt;Relational operators&lt;/h2&gt;
&lt;p&gt;Here are the most common relational operators in R:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Relational operators&#34; srcset=&#34;
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_0cbcf0b43837b0f440e1018b43631498.webp 400w,
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_6c2ebe4838a4ffb6bdac21a5f05f1441.webp 760w,
               /post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/Compare_hu5279ec3dfe0a91dd64026b159131c2d4_628224_0cbcf0b43837b0f440e1018b43631498.webp&#34;
               width=&#34;760&#34;
               height=&#34;281&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s code up those examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;2&amp;lt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;2&amp;gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3&amp;lt;=3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;quot;APPLE&amp;quot;==&amp;quot;APPLE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;quot;Mayonnaise&amp;quot;!= &amp;quot;Instrument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note that comparing characters is case sensitive. For example,&lt;code&gt;&amp;quot;Apple&amp;quot;==&amp;quot;APPLE&amp;quot;&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;na-and-logic&#34;&gt;&lt;code&gt;NA&lt;/code&gt; and logic&lt;/h3&gt;
&lt;p&gt;Using comparison operators and other logical functions on &lt;code&gt;NA&lt;/code&gt; will return &lt;code&gt;NA&lt;/code&gt; even when comparing &lt;code&gt;NA&lt;/code&gt; to &lt;code&gt;NA&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3&amp;gt;NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;NA == NA&lt;/code&gt; is &lt;code&gt;NA&lt;/code&gt;, how do I test if there is an &lt;code&gt;NA&lt;/code&gt; value? Luckily there is a special R function for that: &lt;code&gt;is.na()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;other-isx-functions&#34;&gt;Other &lt;code&gt;is.x()&lt;/code&gt; functions&lt;/h3&gt;
&lt;p&gt;While &lt;code&gt;is.na()&lt;/code&gt; is probably the most commonly used, there are other similar functions to test for different data types. For example, &lt;code&gt;is.character()&lt;/code&gt; tests if the input is a character, &lt;code&gt;is.numeric()&lt;/code&gt; tests if the input is numerical. This is often useful when data wrangling. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.numeric(&amp;quot;five&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.numeric(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.character(&amp;quot;five&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;Logical operators&lt;/h2&gt;
&lt;p&gt;The next import operators to cover are ones that work on logical values and then return a logical value. These are particulary important if there are multiple conditions you need to be met.&lt;/p&gt;
&lt;p&gt;The most relevant ones are NOT (&lt;code&gt;!&lt;/code&gt;), AND (&lt;code&gt;&amp;amp;&lt;/code&gt;), and OR (&lt;code&gt;|&lt;/code&gt;) which are described below.&lt;/p&gt;
&lt;p&gt;The truth table shows the result of either &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; given all possible combinations of inputs (x and y).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Logical Operators&#34; srcset=&#34;
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_77d6585d90356c2f7f1754d35c12c522.webp 400w,
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_c96a0a8ca5678d6ea0d74c1a4c857fa4.webp 760w,
               /post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/table_hucc24530f84677382d1ae1df6d4cd6dac_381716_77d6585d90356c2f7f1754d35c12c522.webp&#34;
               width=&#34;760&#34;
               height=&#34;380&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

An example of what that looks like in R&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;!(1&amp;gt;2)#should return TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(1&amp;gt;2)|(3&amp;gt;2)#Should return TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(1&amp;gt;2)&amp;amp;(3&amp;gt;2)#Should return FALSE since 1 is not greater than 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vector-logic&#34;&gt;Vector logic&lt;/h2&gt;
&lt;p&gt;All of the operations described above work on vectors of data and there are also special functions&lt;/p&gt;
&lt;h3 id=&#34;relational-operators-on-vectors&#34;&gt;Relational operators on vectors&lt;/h3&gt;
&lt;p&gt;The relational operators discussed above also work on vectors!&lt;/p&gt;
&lt;p&gt;We can compare a whole vector to a single value. This will return a vector with logical values for the comparison being applied to each element of the vector. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x&amp;lt;-c(1,3,5,6)
3&amp;lt;x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we compare vectors of the same length, it will return a logical vector doing pairwise comparisons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y&amp;lt;-c(1,5,8)
z&amp;lt;-c(1,1,5)
z==y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;logical-operators-on-vectors&#34;&gt;Logical operators on vectors&lt;/h3&gt;
&lt;p&gt;The logical operators discussed above also work on vectors! Like in the previous section, if we use a logical operator between a vector and a single logical value it will apply that comparison to every element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;!c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;TRUE &amp;amp; c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the two vectors are the same length, it will do pairwise operations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(TRUE,FALSE,FALSE) &amp;amp; c(TRUE,FALSE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(TRUE,FALSE,FALSE) | c(TRUE,TRUE,TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;special-vector-operators&#34;&gt;Special vector operators&lt;/h3&gt;
&lt;p&gt;There are also special functions that act on logical vectors: &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;all()&lt;/code&gt;,&lt;code&gt;which()&lt;/code&gt;, and &lt;code&gt;%in%&lt;/code&gt; described below:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Vector operators&#34; srcset=&#34;
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_89d943f8109f6bbec6f52f93476db367.webp 400w,
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_9766243c56818e98b0eb7976daaaf213.webp 760w,
               /post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/vector_huab8e1403dc3a181d53bfe8a9ebea93cb_361693_89d943f8109f6bbec6f52f93476db367.webp&#34;
               width=&#34;760&#34;
               height=&#34;252&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;any()&lt;/code&gt;returns &lt;code&gt;TRUE&lt;/code&gt; if there is a single &lt;code&gt;TRUE&lt;/code&gt; value. Here are a few examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;any(2&amp;gt;c(1,7,10)) #should be true cause of 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;any(1&amp;gt;c(1,7,10)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;all()&lt;/code&gt;only returns true if all elements are &lt;code&gt;TRUE&lt;/code&gt;. Here are a few examples of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(c(1,2,3,4)==c(1,2,3,5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(c(1,2,3,4)==c(1,2,3,4))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all(!is.na(c(NA,2,3,5,NA)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;which()&lt;/code&gt;returns indexes (or position) of &lt;code&gt;TRUE&lt;/code&gt; values. NOTE: that indexing starts at 1 in R unlike other programing languages that start at 0. Here is an example of code that returns the location of NA values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;which(is.na(c(NA,2,3,5,NA)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%in%&lt;/code&gt; tests which items in the vector left of &lt;code&gt;%in%&lt;/code&gt; are within the vector right of &lt;code&gt;%in%&lt;/code&gt;. For example this will test if any of the fruits listed in the vector on the left are in the vector on the right.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(&amp;quot;Strawberry&amp;quot;,&amp;quot;Apple&amp;quot;,&amp;quot;Lychee&amp;quot;,&amp;quot;Pear&amp;quot;) %in% c(&amp;quot;Apple&amp;quot;,&amp;quot;Pear&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;if-else-statements&#34;&gt;If-Else statements&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s get into conditionals! Often times, we use these logical values or logical results to do something conditioned on them. Graphically this looks like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Else&#34; srcset=&#34;
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1a238528a4e6e66f61a4dd90cb6c4690.webp 400w,
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_0100e0aa5c35877f3ddd824b9ae0ac6c.webp 760w,
               /post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/ifelse_hubb20e6837dd2eab2aca6c4a177ee01a3_429796_1a238528a4e6e66f61a4dd90cb6c4690.webp&#34;
               width=&#34;760&#34;
               height=&#34;413&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;An example would be If it is raining, then I will bring an umbrella, otherwise I will not bring an umbrella. The condition is &amp;ldquo;presence/absence of rain&amp;rdquo;. The different actions is either &amp;ldquo;bring an umbrella&amp;rdquo; or don&amp;rsquo;t &amp;ldquo;bring an umbrella.&amp;rdquo; Coded up in R this is what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(weather==&amp;quot;rain&amp;quot;){
  &amp;quot;Bring an umbrella&amp;quot;
}else{
  &amp;quot;Dont bring an umbrella&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more useful example would be in a function or a &lt;a href=&#34;https://kustra-matt.github.io/post/forloop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;for loop&lt;/a&gt;. Let&amp;rsquo;s make a function to test if something is odd or even.&lt;/p&gt;
&lt;p&gt;To do this we will name our function &lt;code&gt;even_odd&lt;/code&gt; and declare it a as a function with one input &lt;code&gt;num&lt;/code&gt;: &lt;code&gt;function(num)&lt;/code&gt;. Then we will use are if&amp;hellip;else statements to test if &lt;code&gt;num&lt;/code&gt; is even or odd and return a character value indicating the result of that test. To test if &lt;code&gt;num&lt;/code&gt; is even we will use &lt;code&gt;%%&lt;/code&gt; which gives us the modulo (equivalent to the remainder for positive integers). A &lt;code&gt;num&lt;/code&gt; will be even if &lt;code&gt;num&lt;/code&gt; modulo 2 is 0, otherwise it is odd.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd&amp;lt;-function(num){
  if(num%%2==0){
    return(&amp;quot;Even&amp;quot;)
  }else{
    return(&amp;quot;Odd&amp;quot;)
  }
  
}

even_odd(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we run &lt;code&gt;even_odd(NA)&lt;/code&gt; this will throw an error. We need to add another condition to catch &lt;code&gt;NA&lt;/code&gt; values. But how do we add another condition?&lt;/p&gt;
&lt;h3 id=&#34;if-elif-else-statments&#34;&gt;If-Elif-Else statments&lt;/h3&gt;
&lt;p&gt;Luckily it&amp;rsquo;s super easy to add another condition with &lt;code&gt;else if(){}&lt;/code&gt; and we can add an arbitrary amount of conditions stringing together &lt;code&gt;else if(){}&lt;/code&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: the order matters as in R will evalutate the first condition in the &lt;code&gt;if&lt;/code&gt; statement then the first &lt;code&gt;else if&lt;/code&gt; then the next &lt;code&gt;else if&lt;/code&gt; and so on until the &lt;code&gt;else&lt;/code&gt; block. Shown below is a diagram of what that looks like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;If-Elif-Else&#34; srcset=&#34;
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_e7b25f589a499f8b5392b4f19de2a8b0.webp 400w,
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_540b5f98863dc57957c009ee692f1751.webp 760w,
               /post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://kustra-matt.github.io/post/ifelse/elif_hu8480ef27de809c06e937848f76c13cfc_597870_e7b25f589a499f8b5392b4f19de2a8b0.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Let&amp;rsquo;s try our new and improved &lt;code&gt;even_odd&lt;/code&gt; function. Because errors happen when we try to test &lt;code&gt;NA&lt;/code&gt; values. Let&amp;rsquo;s make that our first condition we check.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd&amp;lt;-function(num){
  if(is.na(num)){
    return(&amp;quot;NA!&amp;quot;)
  }else if(num%%2==0){
    return(&amp;quot;Even&amp;quot;)
  }else{
    return(&amp;quot;Odd&amp;quot;)
  }
  
}
even_odd(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Even&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;even_odd(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;NA!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it worked!&lt;/p&gt;
&lt;h2 id=&#34;closing-remarks&#34;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Please check out the other tutorials on my website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to ggplot2</title>
      <link>https://kustra-matt.github.io/post/ggplot2/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://kustra-matt.github.io/post/ggplot2/</guid>
      <description>&lt;p&gt;&amp;lsquo;&lt;a href=&#34;https://ggplot2.tidyverse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2&lt;/a&gt;&amp;rsquo; is a popular graphing package for the R programming language. Once you&amp;rsquo;ve learned the logic and the general grammar of &amp;ldquo;ggplot2&amp;rdquo; it becomes easy to make publication ready graphs. Unfortunately, the learning curve can be pretty steep, especially if you are used to using basic R plots. This is a tutorial to help you get started making graphs in &amp;lsquo;ggplot2&amp;rsquo; and help get through some of the learning curve.&lt;/p&gt;
&lt;h2 id=&#34;getting-ready&#34;&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s install the required packages for this tutorial. We will need to install &lt;code&gt;ggplot2&lt;/code&gt; and the &lt;code&gt;palmerpenguins&lt;/code&gt; packages. The &amp;lsquo;palmerpenguins&amp;rsquo; package has a great dataset we will be using for this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ggplot2&amp;quot;)
install.packages(&amp;quot;palmerpenguins&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to load up the packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(palmerpenguins)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;loading-up-and-checking-the-data&#34;&gt;Loading up and checking the data&lt;/h2&gt;
&lt;p&gt;Unlike plotting with base R. &lt;code&gt;ggplot2&lt;/code&gt; requires data frames to make graphs. For this tutorial we will use the penguin dataset from the package &amp;lsquo;palmerpenguins.&amp;rsquo;
Let&amp;rsquo;s get some info about the data set, using &lt;code&gt;str&lt;/code&gt; function which tells us each column, type of data and starts printing out columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(penguins)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## tibble [333 × 8] (S3: tbl_df/tbl/data.frame)
##  $ species          : Factor w/ 3 levels &amp;quot;Adelie&amp;quot;,&amp;quot;Chinstrap&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ island           : Factor w/ 3 levels &amp;quot;Biscoe&amp;quot;,&amp;quot;Dream&amp;quot;,..: 3 3 3 3 3 3 3 3 3 3 ...
##  $ bill_length_mm   : num [1:333] 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...
##  $ bill_depth_mm    : num [1:333] 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ...
##  $ flipper_length_mm: int [1:333] 181 186 195 193 190 181 195 182 191 198 ...
##  $ body_mass_g      : int [1:333] 3750 3800 3250 3450 3650 3625 4675 3200 3800 4400 ...
##  $ sex              : Factor w/ 2 levels &amp;quot;female&amp;quot;,&amp;quot;male&amp;quot;: 2 1 1 1 2 1 2 1 2 2 ...
##  $ year             : int [1:333] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-our-first-ggplot2-graph&#34;&gt;Making our first &lt;code&gt;ggplot2&lt;/code&gt; graph&lt;/h2&gt;
&lt;p&gt;In this section we will make our first &lt;code&gt;ggplot2&lt;/code&gt; graph! For simplicity we will to a scatter plot of &lt;code&gt;bill_length_mm&lt;/code&gt; and &lt;code&gt;bill_depth_mm&lt;/code&gt; to see the relationship of these two variables.&lt;/p&gt;
&lt;h3 id=&#34;initializing-ggplot2&#34;&gt;Initializing &lt;code&gt;ggplot2&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The first step of making a plot with &lt;code&gt;ggplot2&lt;/code&gt; is to initialize the plot with the function &lt;code&gt;ggplot()&lt;/code&gt;. The first argument of the &lt;code&gt;ggplot()&lt;/code&gt; function is the dataframe you are using and the second argument defines how you want to map the columns to various components of the graph (e.g., which column will be the x-axis).&lt;/p&gt;
&lt;p&gt;For example to make a scatter plot of &lt;code&gt;bill_length_mm&lt;/code&gt; and &lt;code&gt;bill_depth_mm&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm))
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;But it looks empty! Exactly, that&amp;rsquo;s because we haven&amp;rsquo;t actually specified what we want to plot. The &lt;code&gt;ggplot&lt;/code&gt; function just gives us the set up, we have to tell R what we want to plot.&lt;/p&gt;
&lt;h3 id=&#34;adding-geoms-making-a-scatter-plot&#34;&gt;Adding geoms (making a scatter plot)&lt;/h3&gt;
&lt;p&gt;To actually visualize our data using &lt;code&gt;ggplot2&lt;/code&gt;, we need to use &amp;ldquo;geoms&amp;rdquo;. Geoms are ways to visually represent our data and &lt;code&gt;ggplot2&lt;/code&gt; has many different options. &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt; is a great resource to see some of the possibilities.&lt;/p&gt;
&lt;p&gt;In our case, since we want to make a scatter plot, we just need to add &lt;code&gt;geom_point()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;color-aesthetics&#34;&gt;Color aesthetics&lt;/h3&gt;
&lt;p&gt;It looks like we have three different clusters. Looking back at the data maybe these three different clusters represent the three different species in our data set?&lt;/p&gt;
&lt;p&gt;One way we could visualize this is by giving each species a different color, using the &lt;code&gt;color&lt;/code&gt; parameter. Since, we are matching some sort of aesthetic to a variable in our data frame it has to go &lt;strong&gt;inside&lt;/strong&gt; &lt;code&gt;aes()&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter3-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;adding-another-geom-a-line-of-best-fit&#34;&gt;Adding another geom (a line of best fit)&lt;/h3&gt;
&lt;p&gt;A cool thing with &lt;code&gt;ggplot2&lt;/code&gt; is that it is very easy to add more layers. All we have to do is another &lt;code&gt;+ geom_xxx&lt;/code&gt;. A logical next step for this scatter plot is to add a line of best fit using the &lt;code&gt;geom_smooth()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter4-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;It looks a little weird. That&amp;rsquo;s because by default &lt;code&gt;geom_smooth&lt;/code&gt; uses a &amp;ldquo;loess&amp;rdquo; function to fit the data. Essentially this fits seperate polynomial functions between various points of your data and strings them together. Often this is not appropriate and vastly overfits your data. The grey shading, by default, shows the 95% confidence interval of the fit.&lt;/p&gt;
&lt;p&gt;We can specify a specific formula for &lt;code&gt;geom_smooth()&lt;/code&gt; but this is out of the scope of this tutorial. Instead, let&amp;rsquo;s just fit a strait line. The way we do this is by passing the argument &lt;code&gt;method=&amp;quot;lm&amp;quot;&lt;/code&gt; in &lt;code&gt;geom_smooth()&lt;/code&gt;. &amp;ldquo;lm&amp;rdquo; in this case stands for linear model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth(method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter5-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;a-side-note-on-aes&#34;&gt;A side note on &lt;code&gt;aes()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you noticed, it fit a separate line and used different colors for the three species. This is because whatever mappings (i.e., whatever is in the &lt;code&gt;aes()&lt;/code&gt;) you put within the &lt;code&gt;ggplot()&lt;/code&gt; in the first line will be the default for all other layers. However, we can also specify the mappings in individual layers. For example we can the exact same graph with this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_smooth(aes(x=bill_length_mm,y=bill_depth_mm,color=species),method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter6-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Since we want it to apply to all layers it makes more sense to only type out the mappings once in the &lt;code&gt;ggplot()&lt;/code&gt; function. However, if we want different aesthetic mappings to different layers it might make sense to do it this way. For example, say we only want a single line of best fit ignoring the species:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_smooth(aes(x=bill_length_mm,y=bill_depth_mm),method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/scatter7-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;faceted-plots-aka-subplots&#34;&gt;Faceted plots aka subplots&lt;/h2&gt;
&lt;p&gt;One amazing thing about &lt;code&gt;ggplot2&lt;/code&gt; is that it is incredibly easy to make subplots based on variables in your data. There are two different options: &lt;code&gt;facet_wrap&lt;/code&gt; and &lt;code&gt;facet_grid&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;facet_wrap&#34;&gt;&lt;code&gt;facet_wrap&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;facet_wrap&lt;/code&gt; is most useful when we only have one categorical variable that we want to make subplots by. Using the same plot as before let&amp;rsquo;s facet based on island. We either have to do &lt;code&gt;~varname&lt;/code&gt; or &lt;code&gt;vars(varname)&lt;/code&gt; in order for ggplot to recognize it as a column name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth(method=&amp;quot;lm&amp;quot;)+
  facet_wrap(~island)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/facet_wrap1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;facet_grid&#34;&gt;&lt;code&gt;facet_grid&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;facet_grid&lt;/code&gt; is most useful when we have two categorical variable that we want to make subplots by in a grid formation. The way it works is:&lt;br&gt;
&lt;code&gt;facet_grid(horizontal_categorical column ~ vertical_Categorical Column)&lt;/code&gt;
Using the same plot as before let&amp;rsquo;s facet based on island and sex:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth(method=&amp;quot;lm&amp;quot;)+
  facet_grid(sex~island)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/facet_wrap2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;If we wanted to facet by more than two variables, we can combine different combinations with &lt;code&gt;+&lt;/code&gt;. This works for both &lt;code&gt;facet_wrap&lt;/code&gt; and &lt;code&gt;facet_grid&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth(method=&amp;quot;lm&amp;quot;)+
  facet_grid(year+sex~island)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/facet_wrap3-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;other-common-graphs&#34;&gt;Other common graphs&lt;/h2&gt;
&lt;h3 id=&#34;histogram&#34;&gt;Histogram&lt;/h3&gt;
&lt;p&gt;Making histograms only require a variable for the x-axis.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a histogram of &lt;code&gt;flipper_length_mm&lt;/code&gt; with different colors for the different species. Like before we need to initialize the plot with the &lt;code&gt;ggplot()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=flipper_length_mm,color=species))+
  geom_histogram()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/histo1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Two things we can notice: (1) the outlines of the bars are different colors but not the fill and (2) it&amp;rsquo;s giving a message about the number of bins.&lt;/p&gt;
&lt;p&gt;(1) For many geoms (e.g., histogram,box_plot,violin_plot) &lt;code&gt;color&lt;/code&gt; aesthetic is the lines/borders but &lt;code&gt;fill&lt;/code&gt; aesthetics is the inside color and what we generally actually want to change.&lt;/p&gt;
&lt;p&gt;(2) By default &lt;code&gt;geom_histogram&lt;/code&gt; breaks your data into 30 bins. Which may be too much or too less for your data. You can either change this by specifying the number of bins &lt;code&gt;bins=xx&lt;/code&gt; or by the binwidth, &lt;code&gt;binwidth =5&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=flipper_length_mm,fill=species))+
  geom_histogram(binwidth = 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/histo2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h4 id=&#34;minor-tweak-to-histograms&#34;&gt;Minor tweak to histograms&lt;/h4&gt;
&lt;p&gt;On things I prefer to do for histograms is to add an outline to the different bars.&lt;/p&gt;
&lt;p&gt;To add a border all we have to do is change the &lt;code&gt;color&lt;/code&gt; parameter. Previously we used the &lt;code&gt;color&lt;/code&gt; inside &lt;code&gt;aes()&lt;/code&gt; to map color to a specific variable. We can use the same parameter &lt;strong&gt;outside&lt;/strong&gt; of &lt;code&gt;aes&lt;/code&gt; and set it to a color of our choosing. This will default to all the data. This same concept works for other &lt;code&gt;aes()&lt;/code&gt; parameters as well (e.g., &lt;code&gt;shape&lt;/code&gt;,&lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=flipper_length_mm,fill=species))+
  geom_histogram(binwidth = 5,color=&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/histo3-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;boxplot&#34;&gt;Boxplot&lt;/h3&gt;
&lt;p&gt;Making a boxplot requires a variable for both the x-axis and the y-axis.&lt;/p&gt;
&lt;p&gt;As an example let&amp;rsquo;s make a boxplot comparing &lt;code&gt;flipper_length_mm&lt;/code&gt; across species, but different colors for sexes. Once again, like histogram we need to use &lt;code&gt;fill&lt;/code&gt; to change the color inside the boxplot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=species,y=flipper_length_mm,fill=sex))+
  geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/box1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h4 id=&#34;adding-in-raw-data-with-geom_point&#34;&gt;Adding in raw data with &lt;code&gt;geom_point()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;One criticism with boxplots is that they hide the underlying data. One way to address this is to also show the underlying data in the same graph. We can do this with &lt;code&gt;geom_point()&lt;/code&gt;. There are a few things we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adjust the &lt;code&gt;alpha&lt;/code&gt; parameter, which controls how transparent this layer is with 0 being completely transparent and 1 being not transparent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the &lt;code&gt;color&lt;/code&gt; correspond to different species like &lt;code&gt;fill&lt;/code&gt;. Since we don&amp;rsquo;t want to do this for the &lt;code&gt;boxplot&lt;/code&gt; layer, we will only apply this to the &lt;code&gt;geom_point&lt;/code&gt; layer. We can set this by putting &lt;code&gt;aes(color=sex)&lt;/code&gt; within the &lt;code&gt;geom_point()&lt;/code&gt; layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to make the points jittered (i.e., randomly spaced out) and &amp;ldquo;dodged&amp;rdquo; (the different sexes are spaced out like the boxplot). We can accomplish this by setting &lt;code&gt;position=position_jitterdodge())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=penguins,aes(x=species,y=flipper_length_mm,fill=sex))+
  geom_boxplot(alpha=0.4)+
  geom_point(alpha=0.7,aes(color=sex),position=position_jitterdodge())
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/box2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;extra-handy-things&#34;&gt;Extra handy things&lt;/h2&gt;
&lt;p&gt;Here are a just a few handy things to know when working with ggplot2.&lt;/p&gt;
&lt;h3 id=&#34;saving-ggplots-as-a-variable&#34;&gt;Saving ggplots as a variable&lt;/h3&gt;
&lt;p&gt;One of the nice features of &lt;code&gt;ggplot2&lt;/code&gt; is you can save the plots as variables and add new layers.&lt;/p&gt;
&lt;p&gt;For example, lets save the scatter plot as the variable &lt;code&gt;plot1&lt;/code&gt;. Since we just saved it, the plot won&amp;rsquo;t actually appear.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot1&amp;lt;-ggplot(data=penguins,aes(x=bill_length_mm,y=bill_depth_mm,color=species))+
  geom_point()+
  geom_smooth(method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can call it later by the variable name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot1
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/saveplot2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Or we can add new layers to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot1 +
  facet_wrap(~island)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/saveplot3-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;changing-labels&#34;&gt;Changing labels&lt;/h3&gt;
&lt;p&gt;We can change the labels of our plot using the &lt;code&gt;labs&lt;/code&gt; function. Where &lt;code&gt;x&lt;/code&gt; is the label for the x-axis, &lt;code&gt;y&lt;/code&gt; is the label for the y-axis, and &lt;code&gt;color&lt;/code&gt; is the label for the colore legend.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2&amp;lt;-plot1 +
  labs(x=&amp;quot;Bill length (mm)&amp;quot;,y=&amp;quot;Bill depth (mm)&amp;quot;,color=&amp;quot;Species&amp;quot;)

plot2
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/labels-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h3 id=&#34;changing-default-theme&#34;&gt;Changing default theme&lt;/h3&gt;
&lt;p&gt;We can also change other attributes with theme. We won&amp;rsquo;t get into it in this tutorial, but there are so many things you can customize! Anything from the color/size of axis ticks to the family of font used on the labels. Luckily &lt;code&gt;ggplot2&lt;/code&gt; has some other themes, besides the default, to help get you started. Just to show a few of those:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;theme_classic&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2 + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/themeclas-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;&lt;code&gt;theme_dark&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2 + theme_dark()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/themedar-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;&lt;code&gt;theme_void&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2 + theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://kustra-matt.github.io/post/ggplot2/index.en_files/figure-html/themev-1.png&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;closing-remarks&#34;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;I hoped you enjoyed this tutorial. Please shoot me an email if there on any tips for improvement or if you caught a bug! Other tutorials on my website go into more customizations in ggplot2 and other topics in R.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
